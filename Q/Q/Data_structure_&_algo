Arrays and Strings----------------
1)Find the duplicate number in an array of integers.
function findDuplicate (arr) {
    arr.sort((a,b)=>{ return a-b } );
    for(let i=0; i<=arr.length-1; i++) {
        if(arr[i] ==arr[i+1]) {
            return arr[i];
        }
    }
    return -1;
}
let array1 = [3, 1, 3, 4, 2];
console.log(findDuplicate(array1)); 
----------------------------------------------------------------

2)Reverse a string in-place.
function ReverseStr (str) {
    let StrArr = str.split('');
for(let i =0; i<=StrArr.length-1; i++) {
    for(let j=i+1; j<=StrArr.length-1; j++) {
        if(StrArr[i]<StrArr[j]) {
            temp = StrArr[i];
            StrArr[i] = StrArr[j];
            StrArr[j] = temp;
        }
    }
}
   return StrArr.join('') ;  
}
str = "Hello";
console.log(ReverseStr(str));

------------------------------------------------------------------------

3)Check if two strings are anagrams of each other.
function  CheckAnagram(str1,str2) {
    if(str1.length !== str2.length) { 
        return false;
        }
        let counts = {};
   for(val of str1) {
       if(counts[val]) {
           counts[val] = counts[val]+1;
       } else {
           counts[val] =1;
       }
   } 
//   console.log(counts); 
  for(itm of str2 ) {
      if(!counts[itm]) { return false; }
      counts[itm] -=1;
  }
return true;
}
console.log(CheckAnagram(str1="test",str2="tset"));
------------------------------------------------------------------------
4)Find the first non-repeating character in a string.

function firstNonRepeatingChar(str) {
    // Create a map to store character counts
    const charCount = new Map();
    
    // Iterate through the string to count occurrences of each character
    for (let char of str) {
        if (charCount.has(char)) {
            charCount.set(char, charCount.get(char) + 1);
        } else {
            charCount.set(char, 1);
        }
    }
    
    // Find the first character with count 1 (non-repeating)
    for (let char of str) {
        if (charCount.get(char) === 1) {
            return char;
        }
    }
    
    // If no non-repeating character found, return null or handle as needed
    return null;
}

// Example usage:
const inputString = "letetlcode";
const result = firstNonRepeatingChar(inputString);
console.log(`First non-repeating character in "${inputString}" is: ${result}`);

--------------------------------------------------------------------------
Linked Lists---------------------
1)Reverse a linked list.

function ReverseLinkedList (list) {
for(let i=0; i<=list.length-1; i++) {
    for(let j=i; j<=list.length-1; j++) {
        temp = list[i];
        list[i] = list[j];
        list[j] = temp;
    }
}    
return list;
}

let LinkedList =[1,4,7,5,2];
console.log(ReverseLinkedList(LinkedList));


--------------------------------------------------------
2)Detect a cycle in a linked list.
3)Find the middle element of a linked list in one pass.


Trees and Graphs------------------------
1)Implement a binary search tree (BST) and write functions for insert, delete, and search.
2)Find the lowest common ancestor (LCA) of two nodes in a binary tree.
3)Perform a depth-first search (DFS) and breadth-first search (BFS) on a graph.


Sorting and Searching--------------------------------
1)Implement quicksort and analyze its time complexity.
2)Find the k-th smallest element in an unsorted array.
3)Given a sorted array, find if there exists a pair of elements that sum to a given target.


Dynamic Programming--------------------------------------
1)Calculate the nth Fibonacci number using dynamic programming.
2)Find the longest common subsequence (LCS) of two strings.
3)Compute the minimum edit distance between two strings.


Miscellaneous-------------------------------------------
1)Implement a stack using queues and vice versa.
2)Design and implement a least recently used (LRU) cache.
3)Explain the difference between depth-first search (DFS) and breadth-first search (BFS), and when each is appropriate to use.


System Design with Data Structures-----------------------------------------
1)Design a URL shortening service (like bit.ly).
2)Design a system to manage large sets of geographical coordinates and efficiently find nearby points.

Advanced Topics----------------------------------------------
1)Discuss different types of hash functions and their applications.
2)Explain the concept of Big-O notation and how it relates to the performance of algorithms.
3)Describe how you would implement a concurrent data structure or algorithm in a multi-threaded environment.
